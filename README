PENCIL runtime support

Building
--------
./autogen.sh
./configure
make
sudo make install

Build requirements
------------------
* PPCG should be installed (runtime requires ocl_utilities.c file from PPCG source directory).
* To make PPCG generate calls to PENCIL runtime functions, the following patch must be applied
  to the PPCG sources before building. A patch for PPCG 0.3 can be downloaded
  from github:
  http://raw.githubusercontent.com/carpproject/benchmarks/080f10bbed0fa03075d7e4de5b53eb55d629a5c8/patches/ppcg/0001-PENCIL-runtime-support.patch

Usage
-----

To make patched PPCG generate call to PENCIL runtime functions, the
--opencl-pencil-runtime
command line option must be provided to PPCG.

Host code, generated by PPCG should be linked with the lib/libocl_pencil_opt.so library.

gcc pencil_host.c -L${PATH_TO_PENCIL_RUNTIME}/lib -locl_pencil_opt -o prog

The generated binary should be executed using the runtime library:
LD_LIBRARY_PATH=${PATH_TO_PENCIL_RUNTIME} ./prog

API
---
PENCIL Runtime provides 2 APIs - external and internal:

1. External API. This API is supposed to be used by the any code,
which interacts with PENCIL code.

* Initialize PENCIL runtime:
pencil_init (enum PENCIL_INIT_FLAG flag);

This function must be called before any other runtime functions are called.
This function can be called multiple times.
The first call actually creates the runtime session, while the following calls
just increment the reference counter for the current session.

There are 5 possible options of the PENCIL_INIT_FLAG argument:

PENCIL_TARGET_DEVICE_GPU_ONLY
PENCIL_TARGET_DEVICE_CPU_ONLY
PENCIL_TARGET_DEVICE_GPU_THEN_CPU
PENCIL_TARGET_DEVICE_CPU_THEN_GPU
PENCIL_TARGET_DEVICE_DYNAMIC

which determines which OpenCL device will be used to execute OpenCL code,
generated from PENCIL.

For the first call to pencil_init:
    If flag is *not* PENCIL_TARGET_DEVICE_DYNAMIC:
        the runtime uses the device, specified by the flag.

    If flag is PENCIL_TARGET_DEVICE_DYNAMIC:
        the runtime checks PENCIL_TARGET_DEVICE environment variable.
        It can be set to one of the four options:

        gpu -> PENCIL_TARGET_DEVICE_GPU
        cpu -> PENCIL_TARGET_DEVICE_CPU
        gpu_cpu -> PENCIL_TARGET_DEVICE_GPU_THEN_CPU
        cpu_gpu -> PENCIL_TARGET_DEVICE_CPU_THEN_GPU

        If the variable is set to one of these values:
            the runtime uses the corresponding device.

        If variable is not set:
            the runtime uses it's own heuristics to select the device.

For the following calls:
    If flag is *not* PENCIL_TARGET_DEVICE_DYNAMIC:
        the runtime checks whether flag matches the original
        flag and throws an error if it doesn't.

    If flag is PENCIL_TARGET_DEVICE_DYNAMIC:
        the runtime accepts it without checks.

* De-initialize PENCIL runtime:
pencil_shutdown ();

This call decrements the reference counter for the current session.
When the reference counter reaches zero, the session is destroyed.

* PENCIL friendly memory allocation.
pencil_alloc (size_t size);
While this function can be used in the same way, `malloc' function is used,
using this function when allocating input buffers for PENCIL functions might
allow runtime to manage data transfer better.

* Delete the buffer allocated with pencil_alloc:
pencil_free (void * ptr);

2. Internal API.
This API is only exposed to the host code, generated by the PENCIL compiler.

* Create and compile OpenCL program from a file:
pencil_cl_program opencl_create_program_from_file (const char *, const char *);

* Create and compile OpenCL program from a string:
pencil_cl_program opencl_create_program_from_string (const char *, size_t, const char *);

* Releases the OpenCL program:
void opencl_release_program (pencil_cl_program);

* Creates the kernel:
pencil_cl_kernel opencl_create_kernel (pencil_cl_program, const char *);

* Releases the kernel:
void opencl_release_kernel (pencil_cl_kernel);

* Create device memory buffer:
pencil_cl_mem opencl_create_device_buffer (cl_mem_flags, size_t, void *);

* Release the device memory buffer:
void opencl_release_buffer (pencil_cl_mem);

* Copy host memory buffer to device memory:
void opencl_copy_to_device (pencil_cl_mem, size_t, void *);

* Copy device memory buffer to host memory:
void opencl_copy_to_host (pencil_cl_mem, size_t, void *);

* Set kernel argument:
void opencl_set_kernel_arg (pencil_cl_kernel, cl_uint, size_t, const void *, int);

* Execute kernel:
void opencl_launch_kernel (pencil_cl_kernel, cl_uint, const size_t *, const size_t *, const size_t *);
